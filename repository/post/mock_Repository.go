// Code generated by mockery v2.36.0. DO NOT EDIT.

package post

import (
	context "context"

	codetype "github.com/teq-quocbang/store/codetype"

	mock "github.com/stretchr/testify/mock"

	model "github.com/teq-quocbang/store/model"

	proto "github.com/teq-quocbang/store/proto"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Create(_a0 context.Context, _a1 *model.Post) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *model.Post
func (_e *MockRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *MockRepository_Create_Call) Run(run func(_a0 context.Context, _a1 *model.Post)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*model.Post))
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, *model.Post) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) Delete(_a0 context.Context, _a1 uuid.UUID) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MockRepository_Expecter) Delete(_a0 interface{}, _a1 interface{}) *MockRepository_Delete_Call {
	return &MockRepository_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *MockRepository_Delete_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MockRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_Delete_Call) Return(_a0 error) *MockRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *MockRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: _a0, _a1
func (_m *MockRepository) GetByID(_a0 context.Context, _a1 uuid.UUID) (model.Post, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (model.Post, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) model.Post); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Post)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MockRepository_Expecter) GetByID(_a0 interface{}, _a1 interface{}) *MockRepository_GetByID_Call {
	return &MockRepository_GetByID_Call{Call: _e.mock.On("GetByID", _a0, _a1)}
}

func (_c *MockRepository_GetByID_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MockRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetByID_Call) Return(_a0 model.Post, _a1 error) *MockRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (model.Post, error)) *MockRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: ctx, accountID, order, paginator
func (_m *MockRepository) GetList(ctx context.Context, accountID uuid.UUID, order []string, paginator codetype.Paginator) ([]model.Post, int64, error) {
	ret := _m.Called(ctx, accountID, order, paginator)

	var r0 []model.Post
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, codetype.Paginator) ([]model.Post, int64, error)); ok {
		return rf(ctx, accountID, order, paginator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []string, codetype.Paginator) []model.Post); ok {
		r0 = rf(ctx, accountID, order, paginator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []string, codetype.Paginator) int64); ok {
		r1 = rf(ctx, accountID, order, paginator)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uuid.UUID, []string, codetype.Paginator) error); ok {
		r2 = rf(ctx, accountID, order, paginator)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockRepository_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type MockRepository_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - ctx context.Context
//   - accountID uuid.UUID
//   - order []string
//   - paginator codetype.Paginator
func (_e *MockRepository_Expecter) GetList(ctx interface{}, accountID interface{}, order interface{}, paginator interface{}) *MockRepository_GetList_Call {
	return &MockRepository_GetList_Call{Call: _e.mock.On("GetList", ctx, accountID, order, paginator)}
}

func (_c *MockRepository_GetList_Call) Run(run func(ctx context.Context, accountID uuid.UUID, order []string, paginator codetype.Paginator)) *MockRepository_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].([]string), args[3].(codetype.Paginator))
	})
	return _c
}

func (_c *MockRepository_GetList_Call) Return(_a0 []model.Post, _a1 int64, _a2 error) *MockRepository_GetList_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockRepository_GetList_Call) RunAndReturn(run func(context.Context, uuid.UUID, []string, codetype.Paginator) ([]model.Post, int64, error)) *MockRepository_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, postID, content, privacyMode
func (_m *MockRepository) Update(ctx context.Context, postID uuid.UUID, content string, privacyMode proto.Privacy) error {
	ret := _m.Called(ctx, postID, content, privacyMode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, proto.Privacy) error); ok {
		r0 = rf(ctx, postID, content, privacyMode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - postID uuid.UUID
//   - content string
//   - privacyMode proto.Privacy
func (_e *MockRepository_Expecter) Update(ctx interface{}, postID interface{}, content interface{}, privacyMode interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, postID, content, privacyMode)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, postID uuid.UUID, content string, privacyMode proto.Privacy)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), args[3].(proto.Privacy))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, proto.Privacy) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpsertEmoji provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockRepository) UpsertEmoji(_a0 context.Context, _a1 uuid.UUID, _a2 *model.React) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *model.React) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_UpsertEmoji_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertEmoji'
type MockRepository_UpsertEmoji_Call struct {
	*mock.Call
}

// UpsertEmoji is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
//   - _a2 *model.React
func (_e *MockRepository_Expecter) UpsertEmoji(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockRepository_UpsertEmoji_Call {
	return &MockRepository_UpsertEmoji_Call{Call: _e.mock.On("UpsertEmoji", _a0, _a1, _a2)}
}

func (_c *MockRepository_UpsertEmoji_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID, _a2 *model.React)) *MockRepository_UpsertEmoji_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*model.React))
	})
	return _c
}

func (_c *MockRepository_UpsertEmoji_Call) Return(_a0 error) *MockRepository_UpsertEmoji_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_UpsertEmoji_Call) RunAndReturn(run func(context.Context, uuid.UUID, *model.React) error) *MockRepository_UpsertEmoji_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
